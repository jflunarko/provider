package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"
	"myapp/graph/generated"
	"myapp/middleware"
	"myapp/model"
	"myapp/service"
)

// Provider is the resolver for the provider field.
func (r *userResolver) Provider(ctx context.Context, obj *model.User) ([]*model.Provider, error) {
	s := service.GetService()

	provider, _ := s.ProviderGetByUserId(ctx, obj.ID)
	return provider, nil
}

// Packet is the resolver for the packet field.
func (r *userResolver) Packet(ctx context.Context, obj *model.User) ([]*model.Packet, error) {
	s := service.GetService()

	packet, _ := s.PacketGetByUserId(ctx, obj.ID)
	return packet, nil
}

// Register is the resolver for the register field.
func (r *userMutationsResolver) Register(ctx context.Context, obj *model.UserMutations, input model.NewUser) (*model.UserToken, error) {
	s := service.GetTransaction()
	defer func() {
		if r := recover(); r != nil {
			s.Rollback(r)
		}
	}()

	user, _ := s.RegisterUser(ctx, input)
	s.Commit()
	return user, nil
}

// Delete is the resolver for the delete field.
func (r *userMutationsResolver) Delete(ctx context.Context, obj *model.UserMutations, id int) (string, error) {
	s := service.GetTransaction()
	user, _ := s.DeleteUser(ctx, id)
	s.Commit()
	return user, nil
}

// Update is the resolver for the update field.
func (r *userMutationsResolver) Update(ctx context.Context, obj *model.UserMutations, input model.UpdateUser) (string, error) {
	s := service.GetTransaction()

	user, _ := s.UpdateUser(ctx, input)
	s.Commit()
	return user, nil
}

// Login is the resolver for the login field.
func (r *userMutationsResolver) Login(ctx context.Context, obj *model.UserMutations, login model.UserLogin) (*model.UserToken, error) {
	s := service.GetTransaction()
	defer func() {
		if r := recover(); r != nil {
			s.Rollback(r)
		}
	}()
	token, _ := s.LoginUser(ctx, login)
	return token, nil
}

// Buy is the resolver for the buy field.
func (r *userMutationsResolver) Buy(ctx context.Context, obj *model.UserMutations, packetID int) (string, error) {
	s := service.GetTransaction()
	userId := middleware.AuthContext(ctx).ID
	userpacket, err := s.BuyPacket(ctx, packetID, userId)
	if err != nil {
		s.Rollback()
		return "Failed", err
	}
	s.Commit()
	return userpacket, nil
}

// CancelPacket is the resolver for the cancelPacket field.
func (r *userMutationsResolver) CancelPacket(ctx context.Context, obj *model.UserMutations, packetID int) (string, error) {
	s := service.GetTransaction()
	userId := middleware.AuthContext(ctx).ID
	userpacket, _ := s.CancelPacket(ctx, packetID, userId)
	s.Commit()
	return userpacket, nil
}

// Choose is the resolver for the choose field.
func (r *userMutationsResolver) Choose(ctx context.Context, obj *model.UserMutations, providerID int) (string, error) {
	s := service.GetTransaction()
	userId := middleware.AuthContext(ctx).ID
	userprovider, _ := s.ChooseProvider(ctx, providerID, userId)
	s.Commit()
	return userprovider, nil
}

// CancelProvider is the resolver for the cancelProvider field.
func (r *userMutationsResolver) CancelProvider(ctx context.Context, obj *model.UserMutations, providerID int) (string, error) {
	s := service.GetTransaction()
	userId := middleware.AuthContext(ctx).ID
	userProvider, _ := s.CancelProvider(ctx, providerID, userId)
	s.Commit()
	return userProvider, nil
}

// Users is the resolver for the users field.
func (r *userQueryResolver) Users(ctx context.Context, obj *model.UserQuery) ([]*model.User, error) {
	s := service.GetTransaction()
	users, _ := s.UserGetAll(ctx)
	return users, nil
}

// User is the resolver for the user field.
func (r *userQueryResolver) User(ctx context.Context, obj *model.UserQuery, id int) (*model.User, error) {
	s := service.GetTransaction()
	user, _ := s.UserGetByID(ctx, id)
	return user, nil
}

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

// UserMutations returns generated.UserMutationsResolver implementation.
func (r *Resolver) UserMutations() generated.UserMutationsResolver { return &userMutationsResolver{r} }

// UserQuery returns generated.UserQueryResolver implementation.
func (r *Resolver) UserQuery() generated.UserQueryResolver { return &userQueryResolver{r} }

type userResolver struct{ *Resolver }
type userMutationsResolver struct{ *Resolver }
type userQueryResolver struct{ *Resolver }

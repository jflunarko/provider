package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"
	"myapp/graph/generated"
	"myapp/model"
	"myapp/service"
)

// Create is the resolver for the create field.
func (r *packetMutationsResolver) Create(ctx context.Context, obj *model.PacketMutations, input model.NewPacket) (*model.Packet, error) {
	s := service.GetTransaction()

	packet, _ := s.CreatePacket(ctx, input)
	s.Commit()
	return packet, nil
}

// Delete is the resolver for the delete field.
func (r *packetMutationsResolver) Delete(ctx context.Context, obj *model.PacketMutations, id int) (string, error) {
	s := service.GetTransaction()

	packet, _ := s.DeletePacket(ctx, id)
	s.Commit()
	return packet, nil
}

// Update is the resolver for the update field.
func (r *packetMutationsResolver) Update(ctx context.Context, obj *model.PacketMutations, id int, input model.NewPacket) (*model.Packet, error) {
	s := service.GetTransaction()

	packet, _ := s.UpdatePacket(ctx, input, id)
	s.Commit()
	return packet, nil
}

// Packets is the resolver for the packets field.
func (r *packetQueryResolver) Packets(ctx context.Context, obj *model.PacketQuery) ([]*model.Packet, error) {
	s := service.GetService()

	packet, _ := s.PacketGetAll(ctx)
	return packet, nil
}

// Packet is the resolver for the packet field.
func (r *packetQueryResolver) Packet(ctx context.Context, obj *model.PacketQuery, id int) (*model.Packet, error) {
	s := service.GetService()

	packet, _ := s.PacketGetById(ctx, id)
	return packet, nil
}

// PacketMutations returns generated.PacketMutationsResolver implementation.
func (r *Resolver) PacketMutations() generated.PacketMutationsResolver {
	return &packetMutationsResolver{r}
}

// PacketQuery returns generated.PacketQueryResolver implementation.
func (r *Resolver) PacketQuery() generated.PacketQueryResolver { return &packetQueryResolver{r} }

type packetMutationsResolver struct{ *Resolver }
type packetQueryResolver struct{ *Resolver }
